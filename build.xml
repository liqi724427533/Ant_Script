<?xml version="1.0"?>  
<!-- 从svn更新源代码，并重新编译、打包、部署 -->  
<project name="myh" basedir="." default="showTasks">  
  
   <target name="showTasks">
        <echo>1 默认测试环境</echo>
        <echo>2 预发布环境</echo>
        <echo>3 生产环境</echo>
 
        <input validargs="1,2,3" addproperty="option" defaultvalue="1">请选择要编译的环境</input>
         
        <condition property="do.1">
            <equals arg1="1" arg2="${option}"/>
        </condition>
        <antcall target="test01"/>
         
        <condition property="do.2">
            <equals arg1="2" arg2="${option}"/>
        </condition>
        <antcall target="preRelease"/>
         
        <condition property="do.3">
            <equals arg1="3" arg2="${option}"/>
        </condition>
        <antcall target="product"/>
         
    </target>
    <!-- 属性定义(在不同的环境，应该要重新定义合适自己的属性值) -->  
      
    <!-- 定义存放检出代码的目录 -->    
    <property name="checkout_dir" value="${basedir}/服务器端/myh"/>
	<property name="framework_checkout_dir" value="${basedir}/服务器端/framework"/> 
	<property name="myh-service_checkout_dir" value="${basedir}/服务器端/myh-service"/>
	<property name="myh-provider_checkout_dir" value="${basedir}/服务器端/myh-provider"/> 
	<property name="myh-providerweb_checkout_dir" value="${basedir}/myh-provider"/>
	
	 <!-- 定义配置文件存放的目录 --> 
	<property name="testconfig" value="${basedir}/config/testconfig"/>
	<property name="preReleaseconfig" value="${basedir}/config/prereleaseconfig"/>
	<property name="productconfig" value="${basedir}/config/releaseconfig"/>
	
    <!-- 指明要检出的代码在svn服务器上的url测试-->
	<property name="myh_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/trunk/03HDC-数据中心/MYH-我的健康/myh/"/> 
	<property name="framework_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/trunk/01COM-系统架构/framework/"/> 
	<property name="myh-service_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/trunk/03HDC-数据中心/MYH-我的健康/myh-service/"/>
	<property name="myh-provider_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/trunk/03HDC-数据中心/MYH-我的健康/myh-provider/"/>
	<!-- 指明要检出的代码在svn服务器上的url测试
	<property name="myh_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/tags/v1.01.008.b0026/myh/"/> 
	<property name="framework_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/tags/v1.01.008.b0026/framework/"/> 
	<property name="myh-service_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/tags/v1.01.008.b0026/myh-service/"/>
	<property name="myh-provider_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/tags/v1.01.008.b0026/myh-provider/"/>
	<property name="myh-providerweb_svn_url" value="http://127.0.0.1:8888/svn/code-hdc/trunk/03HDC-数据中心/MYH-我的健康/项目集成/myh-provider/"/> -->
	
	<!-- 指明要检出的代码在svn服务器上的url预发布 
	<property name="myh_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/branches/v1.1中山集成/myh/"/> 
	<property name="framework_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/branches/v1.1中山集成/framework/"/> 
	<property name="myh-service_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/branches/v1.1中山集成/myh-service/"/>
	<property name="myh-provider_svn_url" value="https://192.168.188.11:8888/svn/code-hdc/branches/v1.1中山集成/myh-provider/"/>
	<property name="myh-providerweb_svn_url" value="http://127.0.0.1:8888/svn/code-hdc/trunk/03HDC-数据中心/MYH-我的健康/项目集成/myh-provider/"/>-->
	
    <!-- 指明svn账号 -->    
    <property name="svn_repository_user" value="lq"/>  
    <!-- 指明svn密码 -->    
    <property name="svn_repository_passwd" value="12345"/>  
    <!-- 指明tomcat的目录 -->  
    <property name="tomcat_home" value="${basedir}\apache-tomcat-7.0.72"/> 
    <!-- 指明svnant任务插件用到的jar文件的路径 -->  
    <property name="svnant_lib" value="E:/apache-ant-1.9.7/lib"/>
	
    <!-- 指定打包后war文件的名称 -->  
    <property name="war_name" value="myh"/> 
	<property name="providerwebwar_name" value="myh-provider"/>
  
    <!-- 指明编译时需要用到的其他jar文件的路径 -->  
    <property name="other_lib" value="${checkout_dir}/webroot/WEB-INF/lib"/>
	<property name="framework_other_lib" value="${framework_checkout_dir}/lib"/>
	<property name="myh-service_other_lib" value="${myh-service_checkout_dir}/lib"/>
	<property name="myh-provider_other_lib" value="${myh-provider_checkout_dir}/lib"/>
	<property name="myh-providerweb_other_lib" value="${myh-providerweb_checkout_dir}/webroot/WEB-INF/lib"/>
	
		
	
	 <!-- 定义编译后存放的目录 -->
	 <property name="frameworkclasses" value="${basedir}/classes/frameworkclasses"/>
	 <property name="myh-serviceclasses" value="${basedir}/classes/myh-serviceclasses"/>
	 <property name="myh-providerwebclasses" value="${basedir}/classes/myh-providerwebclasses"/>
	 <property name="myhclasses" value="${basedir}/classes/myhclasses"/>

	<!-- 指明编译jar文件的路径 -->  
    <property name="build_jar" value="${basedir}"/>	
	<!-- 指明编译jar文件的名称 -->  
    <property name="myh-service_build_jar_name" value="myh-service.jar"/>	
	<property name="framework_build_jar_name" value="framework.jar"/>
  
    <!-- 当前时间及格式 -->  
    <tstamp>  
        <format property="current_time" pattern="yyyyMMddhhmm" locale="zh"/>  
    </tstamp>  
	
	<!-- 默认测试环境 -->
	<target name="test01" if="do.1">
		<echo>1 测试环境开始编译</echo>
        <antcall target="clean-src"/>
		<antcall target="checkout"/>
		<antcall target="clean-class"/>
		<antcall target="init"/>
		<antcall target="copytest01config"/>
		<antcall target="compileframework"/>
		<antcall target="compilemyh-service"/>
        <antcall target="generate-war"/>
		<antcall target="generate-providerwebwar"/>
		<antcall target="stop-tomcat"/>
		<antcall target="copy-new-war-into-webapps"/>
		<antcall target="start-tomcat"/>
		
		<echo>1 测试环境开始编译完成</echo>
		<echo>部署完毕，请测试是否部署成功。</echo>  
	</target>
	<!-- 预发布环境 -->
	<target name="preRelease" if="do.2">
        <echo>2 预发布环境开始编译</echo>
        <antcall target="clean-src"/>
		<antcall target="checkout"/>
		<antcall target="clean-class"/>
		<antcall target="init"/>
		<antcall target="copypreReleaseconfig"/>
		<antcall target="compileframework"/>
		<antcall target="compilemyh-service"/>
        <antcall target="generate-war"/>
		<antcall target="generate-providerwebwar"/>
		<antcall target="stop-tomcat"/>
		<antcall target="copy-new-war-into-webapps"/>
		<antcall target="start-tomcat"/>
		<echo>部署完毕，请测试是否部署成功。</echo>  
	</target>
	<!-- 生产环境 -->
	<target name="product" if="do.3">
        <echo>3 生产环境开始编译</echo>
        <antcall target="clean-src"/>
		<antcall target="checkout"/>
		<antcall target="clean-class"/>
		<antcall target="init"/>
		<antcall target="copyproductconfig"/>
		<antcall target="compileframework"/>
		<antcall target="compilemyh-service"/>
        <antcall target="generate-war"/>
		<antcall target="generate-providerwebwar"/>
		<antcall target="stop-tomcat"/>
		<antcall target="copy-new-war-into-webapps"/>
		<antcall target="start-tomcat"/>
		<antcall target="copynewwar"/>
		<echo>部署完毕，请测试是否部署成功。</echo>  
	</target>
  
    <!-- path to the svnant libraries. Usually they will be located in ANT_HOME/lib -->  
    <path id="svnant_classpath">  
        <fileset dir="${svnant_lib}">  
            <include name="**/*.jar"/>  
        </fileset>  
    </path>    
    <!-- 项目的classpath路径 -->  
    <path id="project_classpath">  
        <fileset dir="${other_lib}">   
            <include name="*.jar"/>  
        </fileset>  
        <!-- 编译时额外需要javax.servlet.jar和javax.servlet.jsp.jar -->  
        <fileset dir="${other_lib}">  
            <include name="*.jar"/>  
        </fileset>  
    </path>
	<path id="framework_project_classpath">  
        <fileset dir="${framework_other_lib}">   
            <include name="*.jar"/>  
        </fileset>  
        <!-- 编译时额外需要javax.servlet.jar和javax.servlet.jsp.jar -->  
        <fileset dir="${framework_other_lib}">  
            <include name="*.jar"/>  
        </fileset>  
    </path>
	<path id="myh-service_project_classpath">  
        <fileset dir="${myh-service_other_lib}">   
            <include name="*.jar"/>  
        </fileset>  
        <!-- 编译时额外需要javax.servlet.jar和javax.servlet.jsp.jar -->  
        <fileset dir="${myh-service_other_lib}">  
            <include name="*.jar"/>  
        </fileset>  
    </path> 
	<path id="myh-provider_project_classpath">  
        <fileset dir="${myh-provider_other_lib}">   
            <include name="*.jar"/>  
        </fileset>  
        <!-- 编译时额外需要javax.servlet.jar和javax.servlet.jsp.jar -->  
        <fileset dir="${myh-provider_other_lib}">  
            <include name="*.jar"/>  
        </fileset>  
    </path> 
	<path id="myh-providerweb_project_classpath">  
        <fileset dir="${myh-providerweb_other_lib}">   
            <include name="*.jar"/>  
        </fileset>  
        <!-- 编译时额外需要javax.servlet.jar和javax.servlet.jsp.jar -->  
        <fileset dir="${myh-providerweb_other_lib}">  
            <include name="*.jar"/>  
        </fileset>  
    </path> 
  
  
  
    <!-- 引入svn任务 -->  
    <typedef resource="org/tigris/subversion/svnant/svnantlib.xml" classpathref="svnant_classpath" />  
    <!-- 设置svn属性 -->  
    <svnSetting id="svnparams" username="${svn_repository_user}" password="${svn_repository_passwd}" svnkit="false" javahl="false"/>   
  
    <!-- 删除源代码文件夹 -->  
    <target name="clean-src">  
        <echo message="开始删除检出的源码(源码目录：${checkout_dir})，请稍后..." />  
        <delete dir="${checkout_dir}"/>  
        <echo message="源码删除完毕。" />  
		<echo message="开始删除检出的源码(源码目录：${framework_checkout_dir})，请稍后..." />  
        <delete dir="${framework_checkout_dir}"/>  
        <echo message="源码删除完毕。" />
		<echo message="开始删除检出的源码(源码目录：${myh-service_checkout_dir})，请稍后..." />  
        <delete dir="${myh-service_checkout_dir}"/>  
        <echo message="源码删除完毕。" />
		<echo message="开始删除检出的源码(源码目录：${myh-provider_checkout_dir})，请稍后..." />  
        <delete dir="${myh-provider_checkout_dir}"/>  
        <echo message="源码删除完毕。" />
	<!--	<echo message="开始删除检出的源码(源码目录：${myh-providerweb_checkout_dir})，请稍后..." />  
        <delete dir="${myh-providerweb_checkout_dir}"/>  
        <echo message="源码删除完毕。" />--> 
    </target>  
  
  <!-- 复制test01的配置文件 -->  
    <target name="copytest01config">  
        <echo message=" 复制test01的配置文件到相关目录下，请稍后..." />
		<echo message=" 开始复制配置文件到myh" />
		<delete file="${checkout_dir}/src/main/resources/jdbc.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${testconfig}/jdbc.properties" />
		<delete file="${checkout_dir}/webroot/WEB-INF/web.xml"/>
		<copy todir="${checkout_dir}/webroot/WEB-INF" file="${testconfig}/web.xml" />

		<delete file="${checkout_dir}/src/main/resources/bootstrap.xml"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${testconfig}/bootstrap.xml" />
		
		<delete file="${checkout_dir}/src/main/resources/log4j.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${testconfig}/log4j.properties" />
		
		
		
		<delete file="${checkout_dir}/src/main/resources/sys_exception.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/sys_exception.properties" />
		
		<delete file="${checkout_dir}/src/main/resources/keystore.xml"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/keystore.xml" />
		
		<delete file="${checkout_dir}/src/main/resources/cache_conf.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/cache_conf.properties" />
		
  
		<echo message=" 开始复制配置文件到myh-providerweb" />
		<delete file="${myh-providerweb_checkout_dir}/resources/jdbc.properties"/>	
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${testconfig}/jdbc.properties" />	

		<delete file="${myh-providerweb_checkout_dir}/resources/log4j.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${framework_checkout_dir}/src/main/resources/log4j.properties" /> 

		<delete file="${myh-providerweb_checkout_dir}/resources/hession.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${testconfig}/hession.properties" />	
		
		<delete file="${myh-providerweb_checkout_dir}/resources/bootstrap.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${testconfig}/bootstrap.xml" />

		<delete file="${myh-providerweb_checkout_dir}/resources/keystore.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${framework_checkout_dir}/src/main/resources/keystore.xml" /> 
		
		<echo message="复制新的config文件的配置文件完毕。" />
    </target> 
  
   <!-- 复制preRelease的配置文件 -->  
    <target name="copypreReleaseconfig">  
        <echo message=" 复制test01的配置文件到相关目录下，请稍后..." />
		<echo message=" 开始复制配置文件到myh" />
		<delete file="${checkout_dir}/src/main/resources/jdbc.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${preReleaseconfig}/jdbc.properties" />

		<delete file="${checkout_dir}/src/main/resources/bootstrap.xml"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${preReleaseconfig}/bootstrap.xml" />
		
		<delete file="${checkout_dir}/src/main/resources/log4j.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${preReleaseconfig}/log4j.properties" />

		
		<delete file="${checkout_dir}/src/main/resources/sys_exception.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/sys_exception.properties" />
		
		<delete file="${checkout_dir}/src/main/resources/keystore.xml"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/keystore.xml" />
		
		<delete file="${checkout_dir}/src/main/resources/cache_conf.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/cache_conf.properties" />
		
  
		<echo message=" 开始复制配置文件到myh-providerweb" />
		<delete file="${myh-providerweb_checkout_dir}/resources/jdbc.properties"/>	
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${preReleaseconfig}/jdbc.properties" />

		<delete file="${myh-providerweb_checkout_dir}/resources/log4j.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${framework_checkout_dir}/src/main/resources/log4j.properties" /> 

		<delete file="${myh-providerweb_checkout_dir}/resources/hession.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${preReleaseconfig}/hession.properties" />	
		
		<delete file="${myh-providerweb_checkout_dir}/resources/bootstrap.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${preReleaseconfig}/bootstrap.xml" />

		<delete file="${myh-providerweb_checkout_dir}/resources/keystore.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${framework_checkout_dir}/src/main/resources/keystore.xml" /> 
		
		<echo message="复制新的config文件的配置文件完毕。" />
    </target> 
	
	 <!-- 复制product的配置文件 -->  
    <target name="copyproductconfig">  
        <echo message=" 复制test01的配置文件到相关目录下，请稍后..." />
		<echo message=" 开始复制配置文件到myh" />
		<delete file="${checkout_dir}/src/main/resources/jdbc.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${productconfig}/jdbc.properties" />
		
		<delete file="${checkout_dir}/src/main/resources/log4j.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${productconfig}/myh_log_cf/log4j.properties" />

		<delete file="${checkout_dir}/src/main/resources/bootstrap.xml"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${productconfig}/bootstrap.xml" />
		
		<delete file="${checkout_dir}/src/main/resources/sys_exception.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/sys_exception.properties" />
		
		<delete file="${checkout_dir}/src/main/resources/keystore.xml"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/keystore.xml" />
		
		<delete file="${checkout_dir}/src/main/resources/cache_conf.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/cache_conf.properties" />
		
  
		<echo message=" 开始复制配置文件到myh-providerweb" />
		<delete file="${myh-providerweb_checkout_dir}/resources/jdbc.properties"/>	
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${productconfig}/jdbc.properties" />	

		<delete file="${myh-providerweb_checkout_dir}/resources/log4j.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${productconfig}/myh-provider_log_cf/log4j.properties" /> 

		<delete file="${myh-providerweb_checkout_dir}/resources/hession.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${productconfig}/hession.properties" />	
		
		<delete file="${myh-providerweb_checkout_dir}/resources/bootstrap.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${productconfig}/bootstrap.xml" />

		<delete file="${myh-providerweb_checkout_dir}/resources/keystore.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${framework_checkout_dir}/src/main/resources/keystore.xml" /> 
		
		
		<echo message="复制新的config文件的配置文件完毕。" />
    </target> 
  
    <!-- 从SVN服务器checkout源代码 -->  
    <target name="checkout">  
        <echo message="开始从svn服务器${myh_svn_url}检出代码，请稍后..." />   
        <svn refid="svnparams">  
            <checkout url="${myh_svn_url}" revision="HEAD" destPath="${checkout_dir}"  force="true"/>  
        </svn>  
        <echo message="从svn服务器${myh_svn_url}检出代码完成。" /> 
		<echo message="开始从svn服务器${framework_svn_url}检出代码，请稍后..." />   
        <svn refid="svnparams">  
            <checkout url="${framework_svn_url}" revision="HEAD" destPath="${framework_checkout_dir}"  force="true"/>  
        </svn>  
        <echo message="从svn服务器${framework_svn_url}检出代码完成。" /> 
		<echo message="开始从svn服务器${myh-service_svn_url}检出代码，请稍后..." />   
        <svn refid="svnparams">  
            <checkout url="${myh-service_svn_url}" revision="HEAD" destPath="${myh-service_checkout_dir}"  force="true"/>  
        </svn>  
        <echo message="从svn服务器${myh-service_svn_url}检出代码完成。" /> 
		<echo message="开始从svn服务器${myh-provider_svn_url}检出代码，请稍后..." />   
        <svn refid="svnparams">  
            <checkout url="${myh-provider_svn_url}" revision="HEAD" destPath="${myh-provider_checkout_dir}"  force="true"/>  
        </svn>  
        <echo message="从svn服务器${myh-provider_svn_url}检出代码完成。" /> 	
		<!-- <echo message="开始从svn服务器${myh-providerweb_svn_url}检出代码，请稍后..." />   
        <svn refid="svnparams">  
            <checkout url="${myh-providerweb_svn_url}" revision="HEAD" destPath="${myh-providerweb_checkout_dir}"  force="true"/>  
        </svn>  
        <echo message="从svn服务器${myh-providerweb_svn_url}检出代码完成。" /> -->  
    </target>  
      
    <!-- 从SVN服务器update源代码 -->  
    <target name="update">  
        <echo message="开始从svn服务器${myh_svn_url}更新代码，请稍后..." />  
            <update revision="HEAD" dir="${checkout_dir}" />  
        <echo message="从svn服务器${myh_svn_url}更新代码完成。" />  
    </target>  
  
        <!-- 清除旧的编译文件 -->  
    <target name="clean-class">  
    <echo message="开始清空classes文件夹内之前编译生成的旧的类文件，请稍后..." />  
        <delete dir="${checkout_dir}/webroot/WEB-INF/classes"/>  
        <mkdir dir="${checkout_dir}/webroot/WEB-INF/classes"/>  
		<delete dir="${framework_checkout_dir}/bin/classes"/>  
        <mkdir dir="${framework_checkout_dir}/bin/classes"/>  
		<delete dir="${myh-service_checkout_dir}/bin/classes"/>  
        <mkdir dir="${myh-service_checkout_dir}/bin/classes"/> 
		<delete dir="${myh-providerweb_checkout_dir}/WebRoot/WEB-INF/classes"/>  
        <mkdir dir="${myh-providerweb_checkout_dir}/WebRoot/WEB-INF/classes"/>
		
		<delete dir="${frameworkclasses}"/>  
        <mkdir dir="${frameworkclasses}"/>
		<delete dir="${myh-serviceclasses}"/>  
        <mkdir dir="${myh-serviceclasses}"/>
		<delete dir="${myh-providerwebclasses}"/>  
        <mkdir dir="${myh-providerwebclasses}"/>
		<delete dir="${myhclasses}"/>  
        <mkdir dir="${myhclasses}"/>
    <echo message="classes文件清空完毕。" />  
    </target> 
 <!-- 为编译做准备 -->
	<target name="init" >
		<!-- Create the time stamp -->
		<tstamp />
		<!-- Create the build directory structure used by compile -->
		<echo message="删除旧的jar包 ${myh-providerweb_checkout_dir}/webroot/WEB-INF/lib/" />
		<delete file="${myh-service_checkout_dir}/lib/${framework_build_jar_name}"/>
		<delete file="${checkout_dir}/webroot/WEB-INF/lib/${framework_build_jar_name}"/>
		<delete file="${checkout_dir}/webroot/WEB-INF/lib/${myh-service_build_jar_name}"/>
		<delete file="${myh-providerweb_checkout_dir}/webroot/WEB-INF/lib/${framework_build_jar_name}"/>
		<delete file="${myh-providerweb_checkout_dir}/webroot/WEB-INF/lib/${myh-service_build_jar_name}"/>
		<!-- <delete includeEmptyDirs="true">
		<fileset dir="${myh-providerweb_checkout_dir}/webroot/WEB-INF/lib/" includes="**/*.jar" defaultexcludes="no"/>
		</delete>-->
		<echo message="旧jar包删除完毕" />
		
		<echo message="myh-service 复制lib" />

		<delete file="${myh-service_checkout_dir}/lib/jackson-annotations-2.6.1.jar"/>
		<copy todir="${myh-service_checkout_dir}/lib/" file="${framework_other_lib}/jackson-annotations-2.6.1.jar" />
		<delete file="${myh-service_checkout_dir}/lib/jackson-core-2.6.1.jar"/>
		<copy todir="${myh-service_checkout_dir}/lib/" file="${framework_other_lib}/jackson-core-2.6.1.jar" />
		<delete file="${myh-service_checkout_dir}/lib/jackson-databind-2.6.1.jar"/>
		<copy todir="${myh-service_checkout_dir}/lib/" file="${framework_other_lib}/jackson-databind-2.6.1.jar" />
		<echo message="旧jar包删除完毕" />
		<!-- 
		<echo message=" 开始复制config文件的配置文件到相关目录下，请稍后..." />
		<echo message=" 开始复制配置文件到myh" />
		<delete file="${checkout_dir}/src/main/resources/jdbc.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${config}/jdbc.properties" />

		<delete file="${checkout_dir}/src/main/resources/bootstrap.xml"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${config}/bootstrap.xml" />
		
		<delete file="${checkout_dir}/src/main/resources/sys_exception.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/sys_exception.properties" />
		
		<delete file="${checkout_dir}/src/main/resources/keystore.xml"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/keystore.xml" />
		
		<delete file="${checkout_dir}/src/main/resources/cache_conf.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/cache_conf.properties" />
		
		<delete file="${checkout_dir}/src/main/resources/log4j.properties"/>
		<copy todir="${checkout_dir}/src/main/resources" file="${framework_checkout_dir}/src/main/resources/log4j.properties" />
  
		<echo message=" 开始复制配置文件到myh-providerweb" />
		<delete file="${myh-providerweb_checkout_dir}/resources/jdbc.properties"/>	
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${config}/jdbc.properties" />		

		<delete file="${myh-providerweb_checkout_dir}/resources/hession.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${config}/hession.properties" />	
		
		<delete file="${myh-providerweb_checkout_dir}/resources/bootstrap.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${config}/bootstrap.xml" />

		<delete file="${myh-providerweb_checkout_dir}/resources/keystore.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${config}/keystore.xml" /> 
		
		<echo message="复制新的config文件的配置文件完毕。" />-->
	</target>	
      
    <!-- 编译framework生成framework jar包复制framework jar到相关依赖项目里 -->  
    <target name="compileframework" >  
        <echo message="开始编译framework源文件，请稍后..." />   
		<javac nowarn="true" destdir="${framework_checkout_dir}/bin/classes" source="1.7" target="1.7" debug="false"    encoding="UTF-8" classpathref="framework_project_classpath"
                  deprecation="false" optimize="false" failonerror="true">    
            <src path="${framework_checkout_dir}/src"/>  
            <classpath refid="framework_project_classpath"/>  
        </javac>  
		<echo message="framework编译结束" /> 
		<copy todir="${frameworkclasses}">    
            <fileset dir="${framework_checkout_dir}/bin/classes"/>  
        </copy>  

		<echo message="复制framework下的配置文件..." /> 
		<copy todir="${framework_checkout_dir}/bin/classes">    
            <fileset dir="${framework_checkout_dir}/src/main/resources"/>  
        </copy>
		<echo message="复制framework配置文件完毕" /> 
		<echo message="framework生成jar包" />
		<mkdir dir="${basedir}" />
		<!-- Put everything in {build} into the MyProject-{DSTAMP}.jar file -->
		<jar jarfile="${basedir}/${framework_build_jar_name}" basedir="${framework_checkout_dir}/bin/classes">
			
		</jar>
        <echo>开始复制新的framework jar文件到myh目录下，请稍后...</echo>  
        <copy tofile="${other_lib}/${framework_build_jar_name}">    
            <fileset file="${basedir}/${framework_build_jar_name}"/>  
        </copy> 
		<echo>复制新的framework jar文件到myh目录下完毕。</echo> 
		<echo>开始复制新的framework jar文件到myh-service目录下，请稍后...</echo>		
		 <copy tofile="${myh-service_other_lib}/${framework_build_jar_name}">    
            <fileset file="${basedir}/${framework_build_jar_name}"/>  
        </copy>   
        <echo>复制新的framework jar文件到myh-service目录下完毕。</echo>
		<echo>开始复制新的framework jar文件到myh-providerweb目录下，请稍后...</echo>		
		 <copy tofile="${myh-providerweb_other_lib}/${framework_build_jar_name}">    
            <fileset file="${basedir}/${framework_build_jar_name}"/>  
        </copy>   
        <echo>复制新的framework jar文件到myh-providerweb目录下完毕。</echo>
    </target> 

	 <!-- 编译myh-service源代码 -->  
    <target name="compilemyh-service" >  
        <echo message="开始编译myh-service源文件，请稍后..." />   
		<javac nowarn="true" destdir="${myh-service_checkout_dir}/bin/classes" source="1.7" target="1.7" debug="false"    encoding="UTF-8" classpathref="myh-service_project_classpath"
                  deprecation="false" optimize="false" failonerror="true">    
            <src path="${myh-service_checkout_dir}/src"/>  
            <classpath refid="myh-service_project_classpath"/>  
        </javac>  
		<echo message="编译myh-service完毕" /> 
		<copy todir="${myh-serviceclasses}">    
            <fileset dir="${myh-service_checkout_dir}/bin/classes"/>  
        </copy> 
		<echo message="myh-service生成jar包" />
		<jar jarfile="${basedir}/${myh-service_build_jar_name}" basedir="${myh-service_checkout_dir}/bin/classes">
		</jar>	
		<echo message="myh-service生成jar包完毕" />
		<echo>开始复制新的myh-service jar文件到myh目录下，请稍后...</echo>		
		<copy tofile="${other_lib}/${myh-service_build_jar_name}">    
            <fileset file="${basedir}/${myh-service_build_jar_name}"/>  
        </copy>    
        <echo>复制新的myh-service jar文件到myh目录下完毕。</echo> 
		<echo>开始复制新的myh-service jar文件到myh-providerweb目录下，请稍后...</echo>		
		<copy tofile="${myh-providerweb_other_lib}/${myh-service_build_jar_name}">    
            <fileset file="${basedir}/${myh-service_build_jar_name}"/>  
        </copy>    
        <echo>复制新的myh-service jar文件到myh-providerweb目录下完毕。</echo> 
    </target> 
	<target name="compile" >  
        <echo message="开始编译源文件，请稍后..." />   
        <javac nowarn="true" destdir="${checkout_dir}/WebRoot/WEB-INF/classes" source="1.7" target="1.7" debug="true"    encoding="UTF-8" classpathref="project_classpath"
                  deprecation="false" optimize="false" failonerror="true">    
            <src path="${checkout_dir}/src"/>  
            <classpath refid="project_classpath"/>  
        </javac>  
		<copy todir="${myhclasses}">    
            <fileset dir="${checkout_dir}/WebRoot/WEB-INF/classes"/>  
        </copy> 
    </target> 	
	
	<!-- 删除原来的jar文件 -->  
    <target name="delete-old-jar" depends="compilemyh-service">  
        <echo>开始删除旧的同名jar文件...</echo>  
        <delete file="${other_lib}/${framework_build_jar_name}"/> 
		<delete file="${other_lib}/${myh-service_build_jar_name}"/> 
		<delete file="${myh-service_other_lib}/${framework_build_jar_name}"/>  		
        <echo>删除旧的同名jar文件完毕。</echo>  
    </target>  
 
  
    <!-- 复制配置文件 -->  
    <target name="copy-config-files" depends="compile">  
        <copy todir="${checkout_dir}/WebRoot/WEB-INF/classes/">    
            <fileset dir="${checkout_dir}/src/main/resources"/>  
        </copy> 		             
    </target>   
  
    <!-- 生成war包 -->  
    <target name="generate-war" depends="copy-config-files">  
        <war warfile="./${war_name}.war" webxml="${checkout_dir}/WebRoot/WEB-INF/web.xml" excludes="*.svn">  
            <lib dir="${checkout_dir}/WebRoot/WEB-INF/lib"/>  
            <classes dir = "${checkout_dir}/WebRoot/WEB-INF/classes"/>  
            <fileset dir="${checkout_dir}/WebRoot"/>  
        </war>  
    </target>  
	
	<!-- 复制myh-providerweb的配置文件与src -->  
    <target name="copy-myh-providerwebfile" >  
        <echo>开始删除myh-providerweb旧的src与配置文件...</echo>  
		<delete includeEmptyDirs="true">
		<fileset dir="${myh-providerweb_checkout_dir}/src/" includes="**/*" defaultexcludes="no"/>
		</delete>
		<delete file="${myh-providerweb_checkout_dir}/resources/secretKey.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${myh-provider_checkout_dir}/src/main/resources/secretKey.properties" /> 
		<delete file="${myh-providerweb_checkout_dir}/resources/myh_exception.properties"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${myh-provider_checkout_dir}/src/main/resources/myh_exception.properties" />
		<delete file="${myh-providerweb_checkout_dir}/resources/mybatis.cfg.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${myh-provider_checkout_dir}/src/main/resources/mybatis.cfg.xml" />
		<delete file="${myh-providerweb_checkout_dir}/resources/dubbo-provider.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${myh-provider_checkout_dir}/src/main/resources/dubbo-provider.xml" />
		<delete file="${myh-providerweb_checkout_dir}/resources/applicationContext-mybatis.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${myh-provider_checkout_dir}/src/main/resources/applicationContext-mybatis.xml" />
		<delete file="${myh-providerweb_checkout_dir}/resources/applicationContext-jdbc.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${myh-provider_checkout_dir}/src/main/resources/applicationContext-jdbc.xml" />
		<delete file="${myh-providerweb_checkout_dir}/resources/applicationContext-hessian.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${myh-provider_checkout_dir}/src/main/resources/applicationContext-hessian.xml" />
		<delete file="${myh-providerweb_checkout_dir}/resources/applicationContext-beans.xml"/>
		<copy todir="${myh-providerweb_checkout_dir}/resources" file="${myh-provider_checkout_dir}/src/main/resources/applicationContext-beans.xml" />

        <echo>删除旧的myh-providerweb旧的src文件完毕。</echo> 
		
		<echo>开始复制myh-provider新的src到myh-providerweb...</echo>  
        <copy todir="${myh-providerweb_checkout_dir}/src/">    
            <fileset dir="${myh-provider_checkout_dir}/src/main/java/"/>  
        </copy>  	
        <echo>复制myh-provider新的src到myh-providerweb文件完毕。</echo> 
		<!--<echo>开始复制myh-provider新的lib到myh-providerweb...</echo>  
        <copy todir="${myh-providerweb_checkout_dir}/webroot/WEB-INF/lib/">    
            <fileset dir="${myh-provider_checkout_dir}/lib/"/>  
        </copy>  	-->  
        <echo>复制myh-provider新的lib到myh-providerweb文件完毕。</echo> 
		
    </target> 
	
	 <!-- 编译myh-providerweb源代码 -->  
    <target name="compilemyh-providerweb" depends="copy-myh-providerwebfile">  
        <echo message="开始编译源文件，请稍后..." />   
        <javac nowarn="true" destdir="${myh-providerweb_checkout_dir}/webroot/WEB-INF/classes" source="1.7" target="1.7" debug="true"    encoding="UTF-8" classpathref="myh-providerweb_project_classpath"
                  deprecation="false" optimize="false" failonerror="true" includeantruntime="on">    
            <src path="${myh-providerweb_checkout_dir}/src"/>  
            <classpath refid="myh-providerweb_project_classpath"/>  
        </javac> 
		<copy todir="${myh-providerwebclasses}">    
            <fileset dir="${myh-providerweb_checkout_dir}/webroot/WEB-INF/classes"/>  
        </copy> 
    </target>   
  
    <!-- 复制myh-providerweb配置文件 -->  
    <target name="copy-providerwebconfig-files" depends="compilemyh-providerweb">  
		
        <copy todir="${myh-providerweb_checkout_dir}/webroot/WEB-INF/classes/">    
            <fileset dir="${myh-providerweb_checkout_dir}/resources"/>  
        </copy> 	
		<copy todir="${myh-providerweb_checkout_dir}/WebRoot/WEB-INF/classes">    
            <fileset dir="${myh-providerweb_checkout_dir}/src">
    		    <exclude name="**/.svn"/>
    		   	<exclude name="**/*.java"/>
    		</fileset>    
        </copy> 		
    </target>   
  
    <!-- 生成myh-providerwebwar包 -->  
    <target name="generate-providerwebwar" depends="copy-providerwebconfig-files">  
        <war warfile="./${providerwebwar_name}.war" webxml="${myh-providerweb_checkout_dir}/webroot/WEB-INF/web.xml" excludes="*.svn">  
            <lib dir="${myh-providerweb_checkout_dir}/webroot/WEB-INF/lib"/>  
            <classes dir = "${myh-providerweb_checkout_dir}/webroot/WEB-INF/classes"/>  
            <fileset dir="${myh-providerweb_checkout_dir}/webroot"/>  
        </war>  
    </target> 
  
    <!-- 启动tomcat -->  
    <target name="start-tomcat">  
        <echo>开始启动tomcat，请稍后....</echo>  
        <exec executable="${tomcat_home}/bin/startup.bat"  failonerror="false"   
                     vmlauncher="false"  output="${tomcat_home}/logs/log.txt" append="true">  
            <!-- <arg value="/c" /> -->    
            <env key="CATALINA_HOME" path="${tomcat_home}"/>  
            <arg value="/c startup.bat" />     
        </exec>  
        <!-- 检测tomcat的URL是否可以访问成功，访问成功则认为tomcat启动完成 -->  
        <waitfor maxwait="10" maxwaitunit="minute"  checkevery="1000">  
            <http url="http://localhost:8080/"/>  
        </waitfor>  
        <echo>启动tomcat完成。</echo>  
    </target>  
  
    <!-- 停止tomcat，生成war文件成功才停止tomcat来部署 -->  
    <target name="stop-tomcat">    
        <echo>开始停止tomcat，请稍后...</echo>    
        <exec executable="${tomcat_home}/bin/shutdown.bat"  failonerror="false"     
                    output="${tomcat_home}/logs/log.txt" append="true" >    
            <!-- <arg value="/c" /> -->       
            <env key="CATALINA_HOME" path="${tomcat_home}"/>    
            <arg value="/c shutdown.bat" />       
        </exec>  
        <!-- 检测tomcat的URL是否访问失败(用not标签)，访问失败则认为tomcat已经停止。 -->  
        <waitfor maxwait="10" maxwaitunit="minute"  checkevery="1000">  
            <not>  
                <http url="http://localhost:8080/"/>  
            </not>  
        </waitfor>  
        <echo>停止tomcat完成。</echo>  
    </target>   
  
    <!-- 检查是否存在已经部署的旧的目标war包。 -->  
    <target name="old-war-exist-check">   
        <echo>检查是否存在旧的同名war文件...</echo>  
        <available file="${tomcat_home}/webapps/${war_name}.war"  property="old-war-isexist"/>  
    </target>  
	
	 <target name="old-providerwebwar-exist-check">   
        <echo>检查是否存在旧的同名war文件...</echo>  
        <available file="${tomcat_home}/webapps/${providerwebwar_name}.war"  property="old-providerwebwar-isexist"/>  
    </target>  
  
    <!-- 重新部署前，备份原来的war文件。 -->  
    <target name="backup-old-war" depends="old-war-exist-check"  if="old-war-isexist">  
  
        <echo>存在旧的同名war文件，开始备份之前部署的旧的同名war文件...</echo>  
        <copy tofile="./${war_name}_bak${current_time}.war">    
            <fileset file="${tomcat_home}/webapps/${war_name}.war"/>  
        </copy>   
        <echo>备份旧的同名war文件完毕。</echo>  
    </target> 
	<target name="providerwebbackup-old-war" depends="old-providerwebwar-exist-check"  if="old-providerwebwar-isexist">  
  
        <echo>存在旧的同名war文件，开始备份之前部署的旧的同名war文件...</echo>  
        <copy tofile="./${providerwebwar_name}_bak${current_time}.war">    
            <fileset file="${tomcat_home}/webapps/${providerwebwar_name}.war"/>  
        </copy>   
        <echo>备份旧的同名war文件完毕。</echo>  
    </target>   
  
    <!-- 删除原来的war文件 -->  
    <target name="delete-old-war" depends="backup-old-war" if="old-war-isexist">  
        <echo>开始删除旧的同名war文件...</echo>  
        <delete file="${tomcat_home}/webapps/${war_name}.war"/>          
        <echo>删除旧的同名war文件完毕。</echo>  
    </target>  
	<target name="delete-providerwebold-war" depends="providerwebbackup-old-war" if="old-providerwebwar-isexist">  
        <echo>开始删除旧的同名war文件...</echo>  
        <delete file="${tomcat_home}/webapps/${providerwebwar_name}.war"/>          
        <echo>删除旧的同名war文件完毕。</echo>  
    </target>  
  
  
  
    <!-- 检查是否存在已经部署的目标context文件夹。 -->  
    <target name="old-context-exist-check">   
        <echo>检查是否存在旧的同名context文件夹...</echo>  
        <available file="${tomcat_home}/webapps/${war_name}" type="dir"  property="old-context-isexist"/>  
    </target> 
	<target name="old-providerwebcontext-exist-check">   
        <echo>检查是否存在旧的同名context文件夹...</echo>  
        <available file="${tomcat_home}/webapps/${providerwebwar_name}" type="dir"  property="old-providerwebcontext-isexist"/>  
    </target> 
  
    <!-- 删除旧的目标context文件夹 -->  
    <target name="delete-old-context" depends="old-context-exist-check" if="old-context-isexist">  
        <echo>存在旧的同名context文件夹，开始删除旧的同名context文件夹...</echo>  
        <delete dir="${tomcat_home}/webapps/${war_name}"/>   
        <echo>删除旧的同名context文件夹完毕。</echo>  
    </target>  
	<target name="delete-old-providerwebcontext" depends="old-providerwebcontext-exist-check" if="old-providerwebcontext-isexist">  
        <echo>存在旧的同名context文件夹，开始删除旧的同名context文件夹...</echo>  
        <delete dir="${tomcat_home}/webapps/${providerwebwar_name}"/>   
        <echo>删除旧的同名context文件夹完毕。</echo>  
    </target> 
  
  
  
    <!-- 把新打包的war文件复制到tomcat的webapps目录下 -->  
    <target name="copy-new-war-into-webapps" depends="delete-old-context,delete-old-war,delete-old-providerwebcontext,delete-providerwebold-war">  
        <echo>开始复制新的war文件到tomcat的webapps目录下，请稍后...</echo>  
        <copy tofile="${tomcat_home}/webapps/${war_name}.war">    
            <fileset file="./${war_name}.war"/>  
        </copy>
		<copy tofile="${tomcat_home}/webapps/${providerwebwar_name}.war">    
            <fileset file="./${providerwebwar_name}.war"/>  
        </copy>  
        <echo>复制新的war文件到tomcat的webapps目录下完毕。</echo>  
    </target>       
    
			<!-- 生产环境备份上一个版本。 --> 

	 <!-- 检查是否存在已经部署的旧的目标war包。 -->  
    <target name="oldwarexistcheck">   
        <echo>检查是否存在旧的同名war文件...</echo>  
        <available file="./生产环境/${war_name}.war"  property="oldwarisexist"/>  
    </target> 
	
	<target name="backupoldwar" if="oldwarisexist" depends="oldwarexistcheck">   
         <echo>存在旧的同名war文件，开始备份之前部署的旧的同名war文件...</echo>  
        <copy tofile="./生产环境/${war_name}_bak${current_time}.war">    
            <fileset file="./生产环境/${war_name}.war"/>  
        </copy>   
        <echo>备份旧的同名war文件完毕。</echo>  
		
		 <echo>开始删除旧的同名war文件...</echo>  
        <delete file="./生产环境/${war_name}.war"/>          
        <echo>删除旧的同名war文件完毕。</echo>   
    </target>
	
	 <target name="poldwarexistcheck">   
        <echo>检查是否存在旧的同名war文件...</echo>  
        <available file="./生产环境/${providerwebwar_name}.war"  property="poldwarisexist"/>  
    </target> 
	
	<target name="backuppoldwar" if="poldwarisexist" depends="poldwarexistcheck">   
         <echo>存在旧的同名war文件，开始备份之前部署的旧的同名war文件...</echo>  
        <copy tofile="./生产环境/${providerwebwar_name}_bak${current_time}.war">    
            <fileset file="./生产环境/${providerwebwar_name}.war"/>  
        </copy>   
        <echo>备份旧的同名war文件完毕。</echo>  
		
		 <echo>开始删除旧的同名war文件...</echo>  
        <delete file="./生产环境/${providerwebwar_name}.war"/>          
        <echo>删除旧的同名war文件完毕。</echo>   
    </target>

	 <!-- 重新部署前，备份原来的war文件。 -->  
    <target name="copynewwar" depends="backupoldwar,backuppoldwar">  

		<echo>开始复制新的war文件到tomcat的webapps目录下，请稍后...</echo>  
        <copy tofile="./生产环境/${war_name}.war">    
            <fileset file="./${war_name}.war"/>  
        </copy>  
		<copy tofile="./生产环境/${providerwebwar_name}.war">    
            <fileset file="./${providerwebwar_name}.war"/>  
        </copy> 
        <echo>复制新的war文件到tomcat的webapps目录下完毕。</echo>  
    </target>
</project>  